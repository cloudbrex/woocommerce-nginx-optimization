# NGINX configuration for WooCommerce site

# Basic server settings
server {
    listen 80;
    server_name example.com;
    return 301 https://$host$request_uri;
}

# HTTPS server settings
server {
    listen 443 ssl http2;
    server_name example.com;

    # SSL certificate
    ssl_certificate /path/to/ssl.crt;
    ssl_certificate_key /path/to/ssl.key;

    # Enable Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;

    # Set caching headers
    location ~* \.(jpg|jpeg|png|gif|ico|svg)$ {
        expires 365d;
        add_header Cache-Control "public, no-transform";
    }
    location ~* \.(css|js)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # Use browser caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }

    # Increase client body size limit
    client_max_body_size 32M;

    # Enable fastcgi cache
    fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=woo_cache:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_valid 200 60m;
    fastcgi_cache_bypass $http_pragma;
    fastcgi_cache_revalidate $http_pragma;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    # Limit request rate to prevent DoS attacks
    limit_req_zone $binary_remote_addr zone=woo_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=woo_limit_2:10m rate=20r/s;
    limit_req_status 429;

    # PHP processing
    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;

        # Enable fastcgi cache
        fastcgi_cache woo_cache;
        fastcgi_cache_valid 200 60m;
        fastcgi_cache_methods GET HEAD;
        add_header X-Fastcgi-Cache $upstream_cache_status;
    }
}

